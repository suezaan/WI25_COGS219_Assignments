import time
import sys
import os
import random
from psychopy import visual,event,core,gui
from generate_trials import generate_trials

stimuli = ['red', 'orange', 'yellow', 'green', 'blue']

win = visual.Window([800,600],color="gray", units='pix',checkTiming=False)
placeholder = visual.Rect(win,width=180,height=80, fillColor="lightgray",lineColor="black", lineWidth=6,pos=[0,0])
word_stim = visual.TextStim(win,text="", height=40, color="black",pos=[0,0])
instruction = visual.TextStim(win,text="Press the first letter of the ink color", height=20, color="black",pos=[0,-200],autoDraw=True) 
    # draw instruction for every window flip

fixation = visual.TextStim(win,text="+",color="black",height=15)

RTs = [] # store reaction time 
timer = core.Clock() # use psychopy times 
key_pressed=False # for key press

valid_response_keys = ['r', 'o', 'y', 'g', 'b','q']

feedback_ic = visual.TextStim(win,text="Incorrect", height=30, color="black",pos=[0,0])
feedback_slow = visual.TextStim(win,text="Too slow", height=30, color="black",pos=[0,0])

trial_types = ['congruent', 'incongruent']

# runtime var
def get_runtime_vars(vars_to_get,order,exp_version="Stroop"):
    infoDlg = gui.DlgFromDict(dictionary=vars_to_get, title=exp_version, order=order)
    if infoDlg.OK:
        return vars_to_get
    else:
        print('Use Cancelled')

order = ['subj_code','seed','num_reps']
runtime_vars = get_runtime_vars({'subj_code':'stroop_101','seed': 101, 'num_reps': 25}, order)
# print(runtime_vars)

# import trials
def import_trials (trial_filename,col_names=None,separator=','):
    '''
    _doc_: e.g., if col_names = ['word','color','trial_type','orientation'] and cur_trial = ['green','red','incongruent','upside-down']
    this function pairs these like [('word','green'),('color','red'),('trial_type','incongruent'),('orientation','upside-down')]
    '''
    trial_file = open(trial_filename,'r')

    if col_names is None:
        col_names = trial_file.readline().rstrip().split(separator) # first row = column names
    trials_list=[]
    for cur_trial in trial_file:
        assert len(cur_trial) == len(col_names) # make sure # of col names = # of columns
        trial_dict = dict(zip(col_names,cur_trial)) # convert list of pairs (generated by zip) into a dictionary
        trials_list.append(trial_dict)
    return trials_list

generate_trials(runtime_vars['subj_code'],runtime_vars['seed'],runtime_vars['num_reps'])

# read in trials
trial_path = os.path.join(os.getwd(),'trials',runtime_vars['subj_code']+'_trials.csv')
trial_list = import_trials(trial_path)
print(trial_list)

# new trial loop
for cur_trial in trial_list:

    cur_word = cur_trial['word']
    cur_color = cur_trial['color']
    trial_type = cur_trial['trial_type']
    cur_ori = cur_trial['orientation']
    
    # set word and color
    word_stim.setText(cur_word) 
    word_stim.setColor(cur_color)

    if cur_ori == 'upside_down':
        word_stim.setOri(180)
    else:
        word_stim.setOri(0)

    # show fixation
    placeholder.draw()
    fixation.draw()
    win.flip()
    core.wait(.5)

    # inter-stimulus interval
    placeholder.draw()
    win.flip()
    core.wait(.5)

    # word stimulus
    placeholder.draw()
    word_stim.draw()
    win.flip()

    # get response
    timer.reset()
    key_pressed = event.waitKeys(keyList=valid_response_keys,maxWait=2)
    rt = round(timer.getTime()*1000,0)

    # feedback
    if not key_pressed:
        feedback_slow.draw()
        win.flip()
        core.wait(1)
    elif key_pressed[0] == cur_color[0]:
        pass
    elif key_pressed[0] == 'q':
        break
    else:
        feedback_ic.draw()
        win.flip()
        core.wait(1)
        
